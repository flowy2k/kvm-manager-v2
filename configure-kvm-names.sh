#!/bin/bash

# KVM Port Names Configuration Script

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}üè∑Ô∏è  KVM Manager Port Names Configuration${NC}"
echo -e "${BLUE}=======================================${NC}"

# Function to display current configuration
show_current_config() {
    echo -e "\n${CYAN}üìã Current KVM Port Configuration:${NC}"
    echo -e "${CYAN}=================================${NC}"
    
    if [ -f ".env" ]; then
        echo -e "\n${YELLOW}Port ‚Üí Device Name${NC}"
        echo -e "${YELLOW}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"
        for i in {1..16}; do
            name=$(grep "KVM_PORT_${i}_NAME=" .env 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "Server-${i}")
            printf "${GREEN}%2d${NC} ‚Üí ${CYAN}%s${NC}\n" "$i" "$name"
        done
    else
        echo -e "${YELLOW}‚ö†Ô∏è  No .env file found. Using default names.${NC}"
        for i in {1..16}; do
            printf "${GREEN}%2d${NC} ‚Üí ${CYAN}Server-%d${NC}\n" "$i" "$i"
        done
    fi
}

# Function to configure individual port
configure_port() {
    local port_num=$1
    local current_name=$2
    
    echo -e "\n${BLUE}üîß Configuring Port $port_num${NC}"
    echo -e "Current name: ${YELLOW}$current_name${NC}"
    read -p "Enter new name (or press Enter to keep current): " new_name
    
    if [ -n "$new_name" ]; then
        # Validate name (alphanumeric, hyphens, underscores only)
        if [[ "$new_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo "$new_name"
        else
            echo -e "${RED}‚ùå Invalid name. Use only letters, numbers, hyphens, and underscores.${NC}"
            echo "$current_name"
        fi
    else
        echo "$current_name"
    fi
}

# Function to generate .env file
generate_env_file() {
    local port_names=("$@")
    
    echo -e "\n${BLUE}üíæ Generating .env configuration file...${NC}"
    
    # Create backup if .env exists
    if [ -f ".env" ]; then
        cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
        echo -e "${YELLOW}üìã Backup created: .env.backup.$(date +%Y%m%d_%H%M%S)${NC}"
    fi
    
    cat > .env << EOF
# KVM Manager Environment Configuration
# Generated by configure-kvm-names.sh on $(date)

# Port Configuration
KVM_FRONTEND_PORT=3000
KVM_BACKEND_PORT=8081

# Application Environment
NODE_ENV=production
PYTHONPATH=/app/backend
UV_CACHE_DIR=/app/.uv-cache

# Serial Device Configuration
SERIAL_DEVICE=/dev/ttyUSB0
ADDITIONAL_SERIAL_DEVICE=/dev/ttyUSB1

# Nginx Configuration (for production profile)
NGINX_HTTP_PORT=80
NGINX_HTTPS_PORT=443

# KVM Port Friendly Names Configuration
# Customize these names to match your actual connected devices
EOF

    for i in {1..16}; do
        local name="${port_names[$((i-1))]}"
        echo "KVM_PORT_${i}_NAME=${name}" >> .env
    done
    
    cat >> .env << EOF

# Additional KVM Configuration
KVM_MAX_PORTS=16
KVM_AUTO_SWITCH_ENABLED=false
KVM_AUTO_SWITCH_TIMEOUT=30
EOF

    echo -e "${GREEN}‚úÖ Configuration saved to .env${NC}"
}

# Function for interactive configuration
interactive_config() {
    echo -e "\n${BLUE}üéØ Interactive Port Configuration${NC}"
    echo -e "${BLUE}================================${NC}"
    echo -e "Configure names for each KVM port. Press Enter to keep current name."
    echo
    
    declare -a new_names
    
    for i in {1..16}; do
        # Get current name from .env or use default
        current_name=$(grep "KVM_PORT_${i}_NAME=" .env 2>/dev/null | cut -d'=' -f2 | tr -d '"')
        if [ -z "$current_name" ]; then
            current_name="Server-${i}"
        fi
        
        new_name=$(configure_port "$i" "$current_name")
        new_names[$((i-1))]="$new_name"
    done
    
    generate_env_file "${new_names[@]}"
}

# Function for preset configurations
preset_config() {
    echo -e "\n${BLUE}üé® Preset Configurations${NC}"
    echo -e "${BLUE}=======================${NC}"
    echo
    echo "1. üè¢ Enterprise Setup (Web, DB, App servers, etc.)"
    echo "2. üè† Home Lab Setup (Dev, Test, Media servers, etc.)"
    echo "3. üîß IT Infrastructure (Network equipment, monitoring, etc.)"
    echo "4. üíª Development Environment (Multiple dev machines)"
    echo "5. üéÆ Gaming/Streaming Setup (Gaming PCs, streaming rigs)"
    echo "6. ‚öôÔ∏è  Custom Configuration"
    echo
    
    read -p "Choose a preset (1-6): " preset_choice
    
    declare -a preset_names
    
    case $preset_choice in
        1) # Enterprise
            preset_names=(
                "Web-Server-1" "Web-Server-2" "Database-Primary" "Database-Secondary"
                "App-Server-1" "App-Server-2" "Load-Balancer" "Cache-Server"
                "File-Server" "Backup-Server" "Monitoring" "Log-Server"
                "Mail-Server" "DNS-Server" "DHCP-Server" "Management"
            )
            ;;
        2) # Home Lab
            preset_names=(
                "Main-Desktop" "Dev-Machine" "Test-Server" "Media-Server"
                "NAS-Storage" "Home-Assistant" "Pi-Hole" "VPN-Server"
                "Backup-Pi" "IoT-Hub" "Camera-NVR" "Game-Server"
                "Workstation-2" "Laptop-Dock" "Mini-PC" "Spare-System"
            )
            ;;
        3) # IT Infrastructure
            preset_names=(
                "Core-Switch" "Edge-Router" "Firewall" "WiFi-Controller"
                "Domain-Controller" "File-Server" "Print-Server" "DHCP-DNS"
                "Monitoring" "Backup-System" "UPS-Management" "IPMI-Console"
                "Security-System" "Camera-DVR" "VoIP-Server" "Spare-Equipment"
            )
            ;;
        4) # Development
            preset_names=(
                "Dev-Workstation-1" "Dev-Workstation-2" "Build-Server" "Test-Environment"
                "Staging-Server" "Production-Mirror" "Database-Dev" "Cache-Dev"
                "CI-CD-Server" "Code-Repository" "Dev-Tools" "Docker-Host"
                "Kubernetes-Master" "Dev-Laptop-1" "Dev-Laptop-2" "Mobile-Test-Lab"
            )
            ;;
        5) # Gaming/Streaming
            preset_names=(
                "Gaming-PC-1" "Gaming-PC-2" "Streaming-Rig" "Capture-PC"
                "Console-Switch" "Console-PS5" "Console-Xbox" "Retro-Gaming"
                "Media-Center" "NAS-Games" "Voice-Server" "Chat-Bot"
                "Recording-Studio" "Backup-Rig" "Test-Bench" "Spare-Gaming"
            )
            ;;
        6) # Custom
            interactive_config
            return
            ;;
        *)
            echo -e "${RED}‚ùå Invalid choice${NC}"
            return
            ;;
    esac
    
    generate_env_file "${preset_names[@]}"
}

# Function to import from CSV
import_csv() {
    echo -e "\n${BLUE}üìÇ Import from CSV File${NC}"
    echo -e "${BLUE}======================${NC}"
    echo
    echo "CSV format: port_number,device_name"
    echo "Example: 1,Web-Server"
    echo "         2,Database"
    echo
    
    read -p "Enter CSV file path: " csv_file
    
    if [ ! -f "$csv_file" ]; then
        echo -e "${RED}‚ùå File not found: $csv_file${NC}"
        return
    fi
    
    declare -a csv_names
    
    # Initialize with default names
    for i in {1..16}; do
        csv_names[$((i-1))]="Server-${i}"
    done
    
    # Read CSV and update names
    while IFS=',' read -r port_num device_name; do
        if [[ "$port_num" =~ ^[1-9]$|^1[0-6]$ ]]; then
            # Clean device name (remove quotes, spaces)
            clean_name=$(echo "$device_name" | tr -d '"' | tr ' ' '-')
            csv_names[$((port_num-1))]="$clean_name"
        fi
    done < "$csv_file"
    
    generate_env_file "${csv_names[@]}"
}

# Function to export current config to CSV
export_csv() {
    echo -e "\n${BLUE}üì§ Export to CSV File${NC}"
    echo -e "${BLUE}===================${NC}"
    
    local export_file="kvm-port-config-$(date +%Y%m%d_%H%M%S).csv"
    
    echo "port_number,device_name" > "$export_file"
    
    for i in {1..16}; do
        name=$(grep "KVM_PORT_${i}_NAME=" .env 2>/dev/null | cut -d'=' -f2 | tr -d '"' || echo "Server-${i}")
        echo "${i},${name}" >> "$export_file"
    done
    
    echo -e "${GREEN}‚úÖ Configuration exported to: $export_file${NC}"
}

# Main menu
main_menu() {
    while true; do
        echo -e "\n${BLUE}üè∑Ô∏è  KVM Port Names Configuration Menu${NC}"
        echo -e "${BLUE}====================================${NC}"
        echo
        echo "1. üìã Show Current Configuration"
        echo "2. üéØ Interactive Configuration"
        echo "3. üé® Use Preset Configuration"
        echo "4. üìÇ Import from CSV File"
        echo "5. üì§ Export to CSV File"
        echo "6. üîç Validate Configuration"
        echo "7. üöÄ Apply & Deploy"
        echo "8. ‚ùå Exit"
        echo
        
        read -p "Choose an option (1-8): " choice
        
        case $choice in
            1) show_current_config ;;
            2) interactive_config ;;
            3) preset_config ;;
            4) import_csv ;;
            5) export_csv ;;
            6) validate_config ;;
            7) apply_deploy ;;
            8) 
                echo -e "${GREEN}üëã Configuration complete!${NC}"
                exit 0
                ;;
            *)
                echo -e "${RED}‚ùå Invalid option. Please try again.${NC}"
                ;;
        esac
    done
}

# Function to validate configuration
validate_config() {
    echo -e "\n${BLUE}üîç Validating Configuration${NC}"
    echo -e "${BLUE}=========================${NC}"
    
    if [ ! -f ".env" ]; then
        echo -e "${RED}‚ùå No .env file found${NC}"
        return
    fi
    
    local errors=0
    
    # Check for duplicate names
    declare -A name_count
    for i in {1..16}; do
        name=$(grep "KVM_PORT_${i}_NAME=" .env | cut -d'=' -f2 | tr -d '"')
        if [ -n "$name" ]; then
            ((name_count["$name"]++))
            if [ ${name_count["$name"]} -gt 1 ]; then
                echo -e "${YELLOW}‚ö†Ô∏è  Duplicate name found: $name${NC}"
                errors=$((errors + 1))
            fi
        fi
    done
    
    # Check for invalid characters
    for i in {1..16}; do
        name=$(grep "KVM_PORT_${i}_NAME=" .env | cut -d'=' -f2 | tr -d '"')
        if [ -n "$name" ] && [[ ! "$name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Invalid characters in Port $i name: $name${NC}"
            errors=$((errors + 1))
        fi
    done
    
    if [ $errors -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Configuration is valid!${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Found $errors potential issues${NC}"
    fi
}

# Function to apply configuration and deploy
apply_deploy() {
    echo -e "\n${BLUE}üöÄ Apply Configuration & Deploy${NC}"
    echo -e "${BLUE}==============================${NC}"
    
    validate_config
    
    echo -e "\n${YELLOW}This will restart the KVM Manager with new port names.${NC}"
    read -p "Continue? (y/N): " confirm
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        echo -e "\n${BLUE}üîÑ Restarting KVM Manager...${NC}"
        
        # Stop current deployment
        if command -v docker compose >/dev/null 2>&1; then
            docker compose down 2>/dev/null || true
        elif command -v docker-compose >/dev/null 2>&1; then
            docker-compose down 2>/dev/null || true
        fi
        
        # Deploy with new configuration
        if [ -f "deploy.sh" ]; then
            ./deploy.sh
        else
            echo -e "${YELLOW}‚ö†Ô∏è  deploy.sh not found. Please run deployment manually.${NC}"
        fi
    else
        echo -e "${YELLOW}‚ùå Deployment cancelled${NC}"
    fi
}

# Initialize
echo -e "${GREEN}Welcome to the KVM Manager Port Names Configuration Tool!${NC}"
echo -e "This tool helps you assign friendly names to your KVM switch ports."

# Check if .env exists, if not suggest creating one
if [ ! -f ".env" ]; then
    echo -e "\n${YELLOW}üìù No .env file found. Would you like to create one?${NC}"
    read -p "Create .env file? (Y/n): " create_env
    
    if [[ ! "$create_env" =~ ^[Nn]$ ]]; then
        # Create basic .env
        generate_env_file $(for i in {1..16}; do echo "Server-$i"; done)
    fi
fi

main_menu
